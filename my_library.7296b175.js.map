{"mappings":"gfAAAA,EAAA,SCEO,MAAMC,EAAc,KACzBC,EAAKC,QAAQC,UAAY,IAGdC,EAAmBC,IAC9B,MAAMC,EAAmBD,EACtBE,KAAI,EAACC,UAAEA,EAASC,YAAEA,EAAWC,aAAEA,EAAYC,MAAEA,EAAKC,aAAEA,MACnD,IAAIC,EAAQL,EAAUM,KAAK,MAI3B,OAHIN,EAAUO,OAAS,IACrBF,EAAQL,EAAU,GAAK,KAAOA,EAAU,GAAhCA,WAEH,oKAKQC,0BACAE,0JAMeA,gDACIE,OAAWH,4DAI5C,IAEFI,KAAK,IAERb,EAAKC,QAAQc,mBAAmB,YAAaV,EAAA,EC9B/C,MAAMW,EAAgB,IAAI,E,WAAAC,SAGbjB,EAAO,CAClBkB,WAAYC,SAASC,cAAc,oBACnCC,SAAUF,SAASC,cAAc,kBACjCE,YAAaH,SAASC,cAAc,yBACpCnB,QAASkB,SAASC,cAAc,0BAIlC,IAAIG,ECbG,WACL,IACE,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,WAGzC,CAFE,MAAOC,GACPC,SAASC,OAAOC,QAAQH,EAAII,QAC9B,CACF,CDOc,GACVC,ECNG,WACL,IACE,OAAOT,KAAKC,MAAMC,aAAaC,QAAQ,SAGzC,CAFE,MAAOC,GACPC,SAASC,OAAOC,QAAQH,EAAII,QAC9B,CACF,CDAY,GAEZ,MAAME,EAAmB,KACP,OAAZX,IAGFxB,IAEAwB,EAAQjB,KAAI6B,GACVnB,EACGoB,eAAeD,GACfE,MAAKC,IACJnC,EAAiBmC,EAAA,IAElBC,OAAMX,GAAO,IAAIY,MAAMZ,OAE5B5B,EAAKsB,YAAYmB,UAAUC,IAAI,aACjC,EAsBFR,IAEAlC,EAAKkB,WAAWyB,iBAAiB,QAAST,GAC1ClC,EAAKqB,SAASsB,iBAAiB,SAtBR,KACP,OAAVV,IAGFlC,IAEAkC,EAAM3B,KAAI6B,GACRnB,EACGoB,eAAeD,GACfE,MAAKC,IACJnC,EAAiBmC,EAAA,IAElBC,OAAMX,GAAO,IAAIY,MAAMZ,OAE5B5B,EAAKsB,YAAYmB,UAAUC,IAAI,aACjC,I","sources":["src/library.js","src/js/render-cards.js","src/js/my-library.js","src/js/get-data-from-localstorage.js"],"sourcesContent":["import './js/scroll';\n\nimport './js/my-library';\n\nimport './js/get-data-from-localstorage';\n\nimport './js/render-cards';\n\nimport './js/teamModal';\n","import { refs } from './my-library';\n\nexport const clearMarkup = () => {\n  refs.gallery.innerHTML = '';\n};\n\nexport const renderMoviesList = moviesArray => {\n  const markupMoviesList = moviesArray\n    .map(({ genre_ids, poster_path, release_date, title, vote_average }) => {\n      let genre = genre_ids.join(', ');\n      if (genre_ids.length > 2) {\n        genre = genre_ids[0] + ', ' + genre_ids[1] + ', ' + 'Other';\n      }\n      return `\n      <li class=\"film my-library-film\">\n        <a href=\"#\" class=\"film__link\">\n          <div class=\"film__body-img\">\n            <img\n              src=\"${poster_path}\"\n              alt=\"${title}\"\n              class=\"film__img\"\n            />\n          </div>\n\n          <div class=\"film__informations\">\n            <p class=\"film__name\">${title}</p>\n            <p class=\"film__detalies\">${genre} | ${release_date}</p>\n          </div>\n        </a>\n      </li>\n      `;\n    })\n    .join('');\n\n  refs.gallery.insertAdjacentHTML('beforeend', markupMoviesList);\n};\n","import { getWatchedFilms, getQueueFilms } from './get-data-from-localstorage';\nimport { renderMoviesList, clearMarkup } from './render-cards';\nimport NewApiFetches from './apiFetches';\n\nconst newApiFetches = new NewApiFetches();\n\n// Refs\nexport const refs = {\n  btnWatched: document.querySelector('[name=\"watched\"]'),\n  btnQueue: document.querySelector('[name=\"queue\"]'),\n  defaultText: document.querySelector('[name=\"default-text\"]'),\n  gallery: document.querySelector('.my-library-film-card'),\n};\n\n// render\nlet watched = getWatchedFilms();\nlet queue = getQueueFilms();\n\nconst loadWatchedFilms = () => {\n  if (watched === null) {\n    return;\n  } else {\n    clearMarkup();\n\n    watched.map(id =>\n      newApiFetches\n        .fetchMovieById(id)\n        .then(data => {\n          renderMoviesList(data);\n        })\n        .catch(err => new Error(err))\n    );\n    refs.defaultText.classList.add('is-hidden');\n  }\n};\n\nconst loadQueueFilms = () => {\n  if (queue === null) {\n    return;\n  } else {\n    clearMarkup();\n\n    queue.map(id =>\n      newApiFetches\n        .fetchMovieById(id)\n        .then(data => {\n          renderMoviesList(data);\n        })\n        .catch(err => new Error(err))\n    );\n    refs.defaultText.classList.add('is-hidden');\n  }\n};\n\n// Render wathed films after loading page\nloadWatchedFilms();\n// Event listener\nrefs.btnWatched.addEventListener('click', loadWatchedFilms);\nrefs.btnQueue.addEventListener('click', loadQueueFilms);\n","// get database from localstorage and render\n\nexport function getWatchedFilms() {\n  try {\n    return JSON.parse(localStorage.getItem('watched'));\n  } catch (err) {\n    Notiflix.Notify.failure(err.message);\n  }\n}\n\nexport function getQueueFilms() {\n  try {\n    return JSON.parse(localStorage.getItem('queue'));\n  } catch (err) {\n    Notiflix.Notify.failure(err.message);\n  }\n}\n"],"names":["parcelRequire","$48b9195af7100b32$export$d1927cf3bc385580","$bb2af86579234925$export$21666b427502ea6d","gallery","innerHTML","$48b9195af7100b32$export$322a725b9435eb51","moviesArray","markupMoviesList","map","genre_ids","poster_path","release_date","title","vote_average","genre","join","length","insertAdjacentHTML","$bb2af86579234925$var$newApiFetches","default","btnWatched","document","querySelector","btnQueue","defaultText","$bb2af86579234925$var$watched","JSON","parse","localStorage","getItem","err","Notiflix","Notify","failure","message","$bb2af86579234925$var$queue","$bb2af86579234925$var$loadWatchedFilms","id","fetchMovieById","then","data","catch","Error","classList","add","addEventListener"],"version":3,"file":"my_library.7296b175.js.map"}